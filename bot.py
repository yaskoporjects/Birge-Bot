import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime

API_TOKEN = "7978486552:AAGGWOueJcz4Nv5paNZpXpMzfXhXtFkwa2I"
CHANNEL_ID = "@birgetest"
ADMIN_PASSWORD = "birgebest"
LANGUAGES = ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∞üá¨ –ö—ã—Ä–≥—ã–∑—á–∞"]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# FSM
class Form(StatesGroup):
    Language = State()
    WaitingPassword = State()
    Title = State()
    Date = State()
    Location = State()
    Description = State()
    Photo = State()
    Confirm = State()

user_data = {}
admins = set()

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for lang in LANGUAGES:
        markup.add(KeyboardButton(lang))
    await message.answer("üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:", reply_markup=markup)
    await Form.Language.set()

@dp.message_handler(state=Form.Language)
async def language_handler(message: types.Message, state: FSMContext):
    lang = message.text
    if lang not in LANGUAGES:
        return await message.reply("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤.")
    await state.update_data(language=lang)
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª", reply_markup=cancel_skip())
    await Form.WaitingPassword.set()

@dp.message_handler(state=Form.WaitingPassword)
async def password_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await start_title(message, state)
    elif message.text == ADMIN_PASSWORD:
        admins.add(message.from_user.id)
        await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω.")
        await start_title(message, state)
    else:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

async def start_title(message, state):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=cancel_skip())
    await Form.Title.set()

@dp.message_handler(state=Form.Title)
async def title_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(title=None)
    else:
        await state.update_data(title=message.text)
    await message.answer("üìÖ –ö–æ–≥–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?", reply_markup=cancel_skip())
    await Form.Date.set()

@dp.message_handler(state=Form.Date)
async def date_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(date=None)
    else:
        await state.update_data(date=message.text)
    await message.answer("üìç –ì–¥–µ –ø—Ä–æ–π–¥—ë—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?", reply_markup=cancel_skip())
    await Form.Location.set()

@dp.message_handler(state=Form.Location)
async def location_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(location=None)
    else:
        await state.update_data(location=message.text)
    await message.answer("üìù –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=cancel_skip())
    await Form.Description.set()

@dp.message_handler(state=Form.Description)
async def desc_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(description=None)
    else:
        await state.update_data(description=message.text)
    await message.answer("üì∏ –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):", reply_markup=cancel_skip())
    await Form.Photo.set()

@dp.message_handler(content_types=['photo'], state=Form.Photo)
async def photo_handler(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await confirm_post(message, state)

@dp.message_handler(state=Form.Photo)
async def skip_photo_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(photo=None)
        await confirm_post(message, state)
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")

async def confirm_post(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = "‚ú® –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
    if data.get("title"): text += f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
    if data.get("date"): text += f"üóì –î–∞—Ç–∞: {data['date']}\n"
    if data.get("location"): text += f"üìç –õ–æ–∫–∞—Ü–∏—è: {data['location']}\n"
    if data.get("description"): text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
    text += "\n**–ë–ò–†–ì–ï ‚Äî –ü–õ–ê–¢–§–û–†–ú–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô**\n@nicevolunteer"

    if data.get("photo"):
        await bot.send_photo(message.chat.id, data["photo"], caption=text)
    else:
        await message.answer(text)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?", reply_markup=markup)
    await Form.Confirm.set()

@dp.callback_query_handler(state=Form.Confirm)
async def confirm_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if call.data == "publish":
        text = "‚ú® –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
        if data.get("title"): text += f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        if data.get("date"): text += f"üóì –î–∞—Ç–∞: {data['date']}\n"
        if data.get("location"): text += f"üìç –õ–æ–∫–∞—Ü–∏—è: {data['location']}\n"
        if data.get("description"): text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        text += "\n**–ë–ò–†–ì–ï ‚Äî –ü–õ–ê–¢–§–û–†–ú–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô**\n@nicevolunteer"

        if data.get("photo"):
            await bot.send_photo(CHANNEL_ID, data["photo"], caption=text)
        else:
            await bot.send_message(CHANNEL_ID, text)
        await call.message.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
    else:
        await call.message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")

    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
@dp.message_handler(commands=['birge'])
async def birge_admin(message: types.Message):
    if message.from_user.id in admins:
        await message.answer("üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!")
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# Cancel / Skip –∫–Ω–æ–ø–∫–∏
def cancel_skip():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    markup.add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    return markup

# –û—Ç–º–µ–Ω–∞
@dp.message_handler(lambda message: message.text.lower() == '–æ—Ç–º–µ–Ω–∞', state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)